# Receive a directory as an argument, in that directory there must be a file named cpu_mem_usage.csv, created by the script track_... 
# The directory must contain a log file as well, generated by the test script, with timestamps of beginning and end of each test.
# Will generate a csv file containing the usage during the tests

import commands
import sys
import os.path

def le_timestamp(linha, dia_inicial):
	lista = linha.split('\n')[0].split(' ')
	if lista[2] == "":
		index = 3
	else:
		index = 2
	dia = int(lista[index])
	if (dia < dia_inicial):
		print "END OF THE MONTH!!!!!\n\n\n" #I did not consider here the possibility of the test starting in one month and finishing in the next one. If this ever happens, Ill deal with it.
	hora = int(lista[index+1].split(':')[0])
	minuto = int(lista[index+1].split(':')[1])
	segundo = float(lista[index+1].split(':')[2])
	return ((((dia - dia_inicial)*24 + hora)*60 + minuto)*60 + segundo)

def le_timestamp_usage(linha, dia_inicial):
	times = linha.split(' ')
	dia = int(times[2])
	if dia < dia_inicial:
		print "PANIC! I dont know how to read this timestamp",
		print linha
		return -1
	times = times[3].split(':')
	hora = int(times[0])
	minuto = int(times[1])
	segundo = float(times[2])
	return ((((dia - dia_inicial)*24 + hora)*60 + minuto)*60 + segundo)

#get arguments
dir = sys.argv[1]
if not (os.path.isfile(dir+"/cpu_mem_usage.csv")):
	print "I cannot find the cpu_mem_usage.csv in dir",
	print dir 
	exit()
lista = commands.getoutput("ls "+dir+"/*.txt").split('\n')
if("No such" in lista[0]) or ("encontrado" in lista[0]):
	print "I cannot find a txt file in the dir",
	print dir
	print lista
	exit()
if len(lista) > 1:
	print "I dont know which txt file is the log in dir",
	print dir
	print lista
	exit()
logfile = lista[0]
print logfile
log = open(logfile, "r")

#will read the logfile and create a list of tests ordered by time, with start and end time, so then later we can match with usage measurements
testes = []
le_start = 0
le_end = 0
dia_inicial = -1 #well keep the day of the first timestamp, so we can treat situations where a test starts in one day and finished in the next one
ano_inicial = mes_inicial = -1
esse_teste = {}
ultimo_teste={}
count = 0
for linha in log:
	if (linha == "") or (linha == "\n"):
		continue
	if "cache" in linha: #new test, read parameters
		lista = linha.split('\n')[0].split('_')
		esse_teste["operation"] = lista[0]
		esse_teste["equipment"] = lista[1].split('+')[0]
		esse_teste["device"] = lista[1].split('+')[1]
		if lista[2] == "":
			index = 3
		else:
			index = 2
		if "4m" in lista[index]:
			esse_teste["reqsize"] = 4*1024
		else:
			esse_teste["reqsize"] = 32
		if "comcache" in lista[index+1]:
			esse_teste["cache"] = 1
		else:
			esse_teste["cache"] = 0
		esse_teste["repetition"] = lista[index+2]
	elif "start" in linha: 
		le_start = 1
	elif "end" in linha: 
		le_end = 1
	elif le_start == 1: #timestamp
		#Im ignoring timezone here because im assuming it is the same from the usage file (they are in the same machine)
		if not ("2017" in linha):
			print linha
			print "PANIC! Era pra ler um timestamp aqui!!!"
			exit(1)
		if not ("cache" in esse_teste):
			print "PANIC! Lendo timestamp mas nao sei de que teste!"
			exit(1)
		if dia_inicial == -1:
			this_split = linha.split('\n')[0].split(' ')
			index = 2
			if this_split[2] == "":
				index = 3
			dia_inicial = int(this_split[index])
			mes_inicial = this_split[1]
			ano_inicial = int(this_split[len(this_split)-1])
			print ano_inicial,
			print mes_inicial,
			print dia_inicial
					
		esse_teste["start"] = le_timestamp(linha, dia_inicial)
		le_start = 0
	elif le_end == 1: 
		#Im ignoring timezone here because im assuming it is the same from the usage file (they are in the same machine)
		if not ("2017" in linha):
			print linha
			print "PANIC! Era pra ler um timestamp aqui!!!"
			exit(1)
		if not ("cache" in esse_teste):
			print "PANIC! Lendo timestamp mas nao sei de que teste!"
			exit(1)
		esse_teste["end"] = le_timestamp(linha, dia_inicial)
		le_end = 0
		testes.append(esse_teste)
		ultimo_teste = esse_teste
		esse_teste={}
	else:
		print "PANIC! Nao sei o que fazer agora!"
		print linha
		exit(1)
		

log.close()
# we include more tests for measurements in idle
esse_teste={}
esse_teste["reqsize"] = 0
esse_teste["start"] = ultimo_teste["end"]+60 #one minute after the last test
esse_teste["cache"] = 0
esse_teste["equipment"] = ultimo_teste["equipment"]
esse_teste["device"] = ultimo_teste["device"]
esse_teste["end"] = esse_teste["start"] + 60*10 #10 minutes 
esse_teste["operation"] = "idle"
esse_teste["repetition"] = "1"
testes.append(esse_teste)

#now we read the usage file while going through the tests list in order, writing measurements in the csv
id = dir.split('/')[0]
arq = open(dir+"/cpu_mem_usage.csv", "r")
if os.path.isfile("usage_"+id+".csv"):
	os.system("rm usage_"+id+".csv")
csv = open("usage_"+id+".csv", "w")
csv.write("equipment;device;operation;reqsize;cache;repetition;measurement;cpu;mem\n")

i=0
m=0
for linha in arq:
	if "timestamp" in linha: #skip header
		continue
	lista = linha.split('\n')[0].split(';')
	timestamp = le_timestamp_usage(lista[0], dia_inicial)
	if timestamp < testes[i]["start"]: 
		continue
	if timestamp > testes[i]["end"]: 
		i += 1
		m = 0
		if i >= len(testes):
			break 
		continue
	else:

		csv.write(testes[i]["equipment"]+";"+testes[i]["device"]+";"+testes[i]["operation"]+";"+str(testes[i]["reqsize"])+";"+str(testes[i]["cache"])+";"+testes[i]["repetition"]+";"+str(m) + ";"+lista[1]+";"+lista[2]+"\n")
		m+=1
arq.close()
csv.close()

	



